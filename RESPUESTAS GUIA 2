GUIA #2 GITHUB 

¿Qué es un repositorio en Git y cuál es su función dentro de un proyecto de desarrollo?
Un repositorio en Git es un almacenamiento que contiene todos los archivos de un proyecto, junto con el historial de cambios realizados en ellos. Su función dentro de un proyecto de desarrollo es permitir el seguimiento de versiones, la colaboración entre desarrolladores y la recuperación de versiones anteriores si es necesario.

¿Qué problema resuelve el uso de sistemas de control de versiones como Git en proyectos de desarrollo de software?
Git resuelve el problema de la gestión de cambios en el código fuente, evitando conflictos entre desarrolladores, facilitando el trabajo en equipo, permitiendo deshacer cambios erróneos y manteniendo un historial detallado de modificaciones para mejorar la trazabilidad y recuperación de versiones previas.

¿Cómo permite Git la colaboración entre varios desarrolladores sin que sus cambios interfieran entre sí?
Git permite la colaboración mediante el uso de ramas (branches), donde cada desarrollador puede trabajar en una funcionalidad sin afectar la rama principal. Luego, los cambios pueden fusionarse (merge) después de ser revisados, reduciendo conflictos. También permite trabajar con repositorios remotos, donde los desarrolladores pueden clonar, hacer cambios y sincronizarlos con el equipo.

¿Cuál es la diferencia entre un commit y un push en el flujo de trabajo de Git?

Commit: Guarda los cambios en el repositorio local, creando un registro en el historial de Git.
Push: Envía los commits locales a un repositorio remoto (como GitHub) para que otros colaboradores puedan verlos y trabajar con ellos.
¿Qué es un pull request en GitHub y cómo ayuda a revisar y fusionar los cambios de los colaboradores?
Un pull request (PR) es una solicitud que un desarrollador hace en GitHub para que sus cambios sean revisados antes de fusionarse con la rama principal del proyecto. Permite a otros colaboradores o líderes del proyecto revisar el código, hacer comentarios y sugerir mejoras antes de aceptar los cambios.

¿Qué ventajas ofrece el uso de ramas (branches) en Git cuando se está desarrollando una nueva funcionalidad o corrigiendo un error?

Permite trabajar en nuevas características sin afectar el código estable.
Facilita la corrección de errores sin interrumpir el desarrollo de otras partes del proyecto.
Permite la colaboración en paralelo sin conflictos inmediatos en la rama principal.
Se pueden probar cambios y fusionarlos solo cuando estén listos.
¿En qué situaciones se recomienda usar un fork en GitHub?

Cuando se quiere contribuir a un proyecto externo sin afectar el repositorio original.
Para trabajar en un proyecto público y hacer mejoras antes de proponer cambios mediante un pull request.
Si se quiere experimentar con un código sin riesgo de modificar el original.
Para crear una versión personalizada de un software open source.


1. Estructura del flujo de trabajo utilizando Git y GitHub
La clave para un flujo de trabajo eficiente en Git y GitHub es establecer una estrategia clara de ramas y buenas prácticas para evitar conflictos de código y facilitar la colaboración. Aquí hay una estructura recomendada:

Rama principal (main o master): Esta es la rama estable y siempre debe estar en un estado que sea desplegable. Los cambios en esta rama deben estar completamente probados y listos para producción.

Ramas de desarrollo (develop): Esta rama es donde se integran las funcionalidades desarrolladas. Los desarrolladores deben crear ramas a partir de develop y hacer sus cambios aquí.

Ramas de características o funcionalidades (feature/{nombre-funcionalidad}): Cada desarrollador debe crear una rama para cada nueva funcionalidad o tarea que está desarrollando, tomando como base la rama develop. Una vez terminada una funcionalidad, se realiza un Pull Request (PR) hacia develop para su integración. Por ejemplo, si un desarrollador está trabajando en la funcionalidad de la "Rueda de la vida", podría llamarla feature/rueda-de-la-vida.

Ramas de corrección de errores (hotfix/{nombre-error}): Para problemas críticos en producción que necesitan ser corregidos inmediatamente, los desarrolladores deben crear ramas desde main, corregir el error y hacer el PR a main.

Ramas de integración (release/{nombre-release}): Estas ramas se usan cuando se prepara una nueva versión del proyecto para producción. Generalmente, es la rama donde se hacen pruebas finales antes de que todo se fusione a main.

Flujo de trabajo básico:

Los miembros del equipo crean una rama feature desde develop.
Trabajan en sus funcionalidades de manera aislada y hacen commits frecuentes.
Cuando terminan, abren un Pull Request (PR) hacia develop.
El equipo revisa el PR, y si está aprobado, se hace el merge a develop.
De vez en cuando, se fusiona develop en main (generalmente a través de un PR de release).
Buenas prácticas:

Commits frecuentes y pequeños: Hacer commits pequeños y frecuentes es crucial para mantener un buen historial de cambios.
Revisiones de código: Asegurarse de que todos los cambios pasen por una revisión de código antes de ser fusionados.
Conflictos de merge: Resolver conflictos de manera rápida y efectiva, discutiendo con el equipo si es necesario.
2. Resolución de conflictos de código
Imaginemos que un miembro del equipo ha trabajado en una funcionalidad de la "Rueda de la vida" y al hacer un merge a la rama develop (o main), se presentan conflictos. Para resolverlos, se seguiría este flujo:

Identificar el conflicto: Git te notificará sobre el conflicto al hacer el merge. Tendrás que abrir los archivos afectados y observar los marcadores de conflicto (generalmente indicados como <<<<<<<, =======, y >>>>>>>).

Resolver el conflicto:

Abre los archivos conflictivos en tu editor de código.
Revisa el código en conflicto para decidir qué cambios se deben conservar. Puede ser que tengas que combinar ambas versiones o elegir una sobre la otra.
Elimina los marcadores de conflicto y asegúrate de que el archivo esté listo para ser guardado.
Probar los cambios: Después de resolver el conflicto, es importante realizar pruebas para asegurarse de que los cambios no rompan la funcionalidad existente. Si hay pruebas automatizadas, ejecútalas para verificar que todo sigue funcionando correctamente.

Hacer un commit: Una vez que el conflicto se haya resuelto y probado, realiza un commit con un mensaje claro, como: "Resolución de conflictos en la funcionalidad de la Rueda de la Vida".

Actualizar la rama remota: Si la resolución se hace en una rama local, después de hacer commit, sube los cambios al repositorio remoto.

Revisión final: Dependiendo de las políticas del equipo, el PR debe ser revisado por otro miembro antes de fusionarse finalmente.

3. Automatización de pruebas unitarias con GitHub Actions
GitHub Actions es una excelente herramienta para la automatización de flujos de trabajo, como la ejecución de pruebas unitarias y el despliegue continuo. Para automatizar las pruebas unitarias en GitHub Actions y desplegar el sitio web, sigue estos pasos:

Configurar GitHub Actions:

En el repositorio de GitHub, ve a la pestaña "Actions".
Si no tienes flujos de trabajo previos, selecciona "Set up a workflow yourself" o usa un template existente para pruebas unitarias (por ejemplo, si usas Node.js, el template adecuado es el de "Node.js").

Crear el archivo de flujo de trabajo: Dentro de tu proyecto, crea un archivo YAML en .github/workflows/ci.yml para definir el flujo de trabajo. Ejemplo de archivo básico para ejecutar pruebas unitarias:
name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

Configurar el despliegue continuo: Si deseas que el sitio web se despliegue de manera continua tras pasar las pruebas, puedes agregar un paso adicional para despliegue, por ejemplo, usando servicios como Netlify, Vercel o GitHub Pages. Aquí te dejo un ejemplo de despliegue a GitHub Pages:

deploy:
  runs-on: ubuntu-latest
  needs: test

  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build the site    
      run: npm run build

    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages
        folder: dist

Este flujo de trabajo asegurará que las pruebas se ejecuten en cada push o pull request a la rama main y, si las pruebas son exitosas, el sitio web se desplegará automáticamente a la rama gh-pages.
